import os
import json
import google.generativeai as genai
from pptx import Presentation
from pptx.util import Inches

genai.configure(api_key=os.environ.get("GOOGLE_API_KEY"))

def create_presentation(structured_text: str) -> dict:
    prompt = (
        f"Based on the following business summary, generate a presentation. Provide a concise overall summary, "
        f"3-5 key highlight bullet points, and 3-5 presentation slides, each with a title and content. Return ONLY a valid JSON object with this exact structure: "
        f'{{ "summary": "Overall summary text...", "highlights": ["Highlight 1...", "Highlight 2..."], "slides": [{{"title": "Slide 1 Title", "content": "Slide 1 content..."}}, {{"title": "Slide 2 Title", "content": "Slide 2 content..."}}] }}. '
        f"Summary: `{structured_text}`"
    )

    model = genai.GenerativeModel('gemini-pro')
    response = model.generate_content(prompt)

    try:
        content = response.text.strip().replace("```json", "").replace("```", "").strip()
        presentation_json = json.loads(content)
    except (json.JSONDecodeError, AttributeError):
        presentation_json = {
            "summary": "Could not generate presentation summary.",
            "highlights": [],
            "slides": []
        }

    # Generate a PowerPoint presentation
    prs = Presentation()
    title_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(title_slide_layout)
    title = slide.shapes.title
    subtitle = slide.placeholders[1]

    title.text = presentation_json.get("summary", "Presentation")
    subtitle.text = "Generated by BoardDeck AI"

    for slide_data in presentation_json.get("slides", []):
        bullet_slide_layout = prs.slide_layouts[1]
        slide = prs.slides.add_slide(bullet_slide_layout)
        shapes = slide.shapes

        title_shape = shapes.title
        body_shape = shapes.placeholders[1]

        title_shape.text = slide_data.get("title", "")
        
        tf = body_shape.text_frame
        tf.text = slide_data.get("content", "")

    prs.save("sample_presentation.pptx")

    return presentation_json
